<?php
/**
 * @file
 * Code for the Ads Advert feature.
 */

include_once 'ads_advert.features.inc';

/**
 * Implements hook_menu().
 */
function ads_advert_menu() {
  $menu['advert/add'] = array(
    'title'            => 'Advert',
    'description'      => 'Advert',
    'page callback'    => 'ads_advert_form_wizard',
    'page arguments'   => array(2),
    'access arguments' => array('access content'),
  );

  $menu['advert/%/edit'] = array(
    'title'            => 'Advert',
    'description'      => 'Advert',
    'page callback'    => 'ads_advert_form_wizard',
    'page arguments'   => array(2, 3),
    'access arguments' => array('access content'),
  );

  $menu['advert/%'] = array(
    'title'            => 'Advert',
    'description'      => 'Advert',
    'page callback'    => 'ads_advert_view',
    'page arguments'   => array(2),
    'access arguments' => array('access content'),
  );

  return $menu;
}

/**
 * Multi-step Wizard for advert edit form.
 *
 * @return string
 *   Multistep wizard output.
 */
function ads_advert_form_wizard() {

  ctools_include('wizard');
  ctools_include('object-cache');

  $action = arg(1) == 'add' ? 'add' : 'edit';

  $form_info = array(
    'id'              => 'ads_advert_edit',
    'show trail'      => TRUE,
    'show back'       => TRUE,
    'show cancel'     => TRUE,
    'show return'     => FALSE,
    'back text'       => '« Back',
    'next text'       => 'Next »',
    'next callback'   => 'ads_advert_edit_form_subtask_next',
    'finish callback' => 'ads_advert_edit_form_subtask_finish',
    'return callback' => 'ads_advert_edit_form_subtask_finish',
    'cancel callback' => 'ads_advert_edit_form_subtask_cancel',
    'order' => array(
      'step-1' => t('Basic information'),
      'step-2' => t('Category selection'),
      'step-3' => t('Details'),
      'step-4' => t('Preview'),
    ),
    'forms' => array(
      'step-1' => array(
        'form id' => 'ads_advert_form_step_1',
      ),
      'step-2' => array(
        'form id' => 'ads_advert_form_step_2',
      ),
      'step-3' => array(
        'form id' => 'ads_advert_form_step_3',
      ),
      'step-4' => array(
        'form id' => 'ads_advert_form_step_4',
      ),
    ),
  );

  if ($action === 'add') {
    // Advert adding action.
    $step              = arg(2);
    $form_info['path'] = 'advert/add/%step';
  }
  elseif ($action === 'edit') {
    // Advert editing action.
    $step              = arg(3);
    $nid               = (int) arg(1);

    $form_info['path'] = 'advert/' . $nid . '/edit/%step';
  }

  $ads_advert_form = ctools_object_cache_get('ads_advert_edit', 'form');

  if (!$ads_advert_form) {
    $step            = current(array_keys($form_info['order']));
    $ads_advert_form = new stdClass();

    ctools_object_cache_set('ads_advert_edit', 'form', $ads_advert_form);
  };

  if ((array) $ads_advert_form) {
    $form_state['node'] = $ads_advert_form;
  }

  $output = ctools_wizard_multistep_form($form_info, $step, $form_state);

  return $output;
};

/**
 * Generates advert edit form based on the specified step.
 */
function ads_advert_form_step($form, &$form_state, $step = 1) {

  module_load_include('inc', 'node', 'node.pages');

  $user = $GLOBALS['user'];

  if ($form_state['rebuild']) {
    // Don't hang on to submitted data in form state input.
    $form_state['input'] = array();
  }

  $node_type = 'advert';
  $form_id   = $node_type . '_node_form';
  $action    = arg(1) == 'add' ? 'add' : 'edit';
  if ($action === 'edit') {
    $nid = arg(1);
  }

  $node = ctools_object_cache_get('ads_advert_edit', 'node');

  if (
      // Adding a node that is already saved.
      $action == 'add' && $node !== NULL && !empty($node->nid)
      // Editing a node with nid other than that stored in cache.
    || $action == 'edit' && $node !== NULL && $node->nid != $nid) {
    // Clearing caches.
    ads_advert_editor_form_clear_caches();
    $node = NULL;
  }

  if ($node === NULL && !empty($nid)) {
    // We need to load node as it will be edited by the user.
    $node = node_load($nid);

    $content_type_nodes = ads_advert_get_node_content_type_nodes($node, FALSE);

    // Storing advert node content type nodes in the cache.
    ctools_object_cache_set('ads_advert_edit', 'content_type_nodes', $content_type_nodes);
  }

  if (empty($node)) {
    // Node is not in cache, creating new one.
    $node = new stdClass();
    $node->nid      = NULL;
    $node->title    = '';
    $node->uid      = $user->uid;
    $node->name     = isset($user->name) ? $user->name : '';
    $node->type     = $node_type;
    $node->feeds    = array();
    $node->language = LANGUAGE_NONE;

    node_object_prepare($node);
  }

  $node_is_already_saved = !empty($node->nid);

  // Storing advert node in the cache.
  ctools_object_cache_set('ads_advert_edit', 'node', $node);

  // Generating advert node edit form.
  $form = node_form($form, $form_state, $node);

  // Hiding step-unrelated field-groups.
  foreach (array(1, 2, 3) as $i) {
    if ($step != $i) {
      field_group_hide_field_groups($form, array('group_advert_step_' . $i));
    }
  }

  switch ($step) {
    case 1:
    case 2:
    case 4:
      // We don't want following fields in step 1 and 2:
      unset($form['author']);
      unset($form['revision_information']);
      unset($form['options']);
      unset($form['additional_settings']);
      break;
  }

  switch ($step) {
    case 3:
      // Category-related content types step.
      $content_types = ads_advert_get_node_category_content_types($form_state['node']);

      $content_type_nodes = ctools_object_cache_get('ads_advert_edit', 'content_type_nodes');

      // Traversing all category-related content types in top-bottom direction.
      foreach ($content_types as $content_type) {

        // Fetching full content type name.
        $content_type_name     = node_type_get_name((object) array('type' => $content_type));

        // Rendering content type form.
        $form[$content_type] = array(
          '#title' => ucwords($content_type_name),
          '#type'  => 'fieldset',
        );

        $content_type_form       = &$form[$content_type]['form'];
        $content_type_form_state = &$form_state[$content_type];

        // We are loading node from the cache or creating new one if not already
        // in cache.
        $content_type_node = @$content_type_nodes[$content_type];

        if ($content_type_node === NULL) {
          // Node isn't cached, creating new one.
          $content_type_node = new stdClass();

          // Filling node default settings.
          $content_type_node->title    = '';
          $content_type_node->nid      = NULL;
          $content_type_node->type     = $content_type;
          $content_type_node->uid      = $user->uid;
          $content_type_node->name     = isset($user->name) ? $user->name : '';
          $content_type_node->language = LANGUAGE_NONE;
          $content_type_node->title    = '';

          node_object_prepare($content_type_node);

          $content_type_nodes[$content_type] = $content_type_node;
        }

        // Generating content type node editing form.
        $content_type_form = node_form($content_type_form, $content_type_form_state, $content_type_node);

        // We don't want following fields in step 3:
        unset($content_type_form['title']);
        unset($content_type_form['body']);
        unset($content_type_form['author']);
        unset($content_type_form['revision_information']);
        unset($content_type_form['options']);
        unset($content_type_form['additional_settings']);

        // Skipping not ours submit callbacks.
        $content_type_form['actions'] = array();

        if (!empty($content_type_form_state['field'])) {
          // Copying content type node fields into $form_state['fields'] array.
          foreach ($content_type_form_state['field'] as $key => $value) {
            $form_state['field'][$key] = $value;
          }
        }

        // Clearing references.
        unset($content_type_form);
        unset($content_type_form_state);
      }

      // Caching content type nodes for later use, e.g., in submit callback.
      ctools_object_cache_set('ads_advert_edit', 'content_type_nodes', $content_type_nodes);

      $form['buttons']['next'] = array(
        '#type'        => 'submit',
        '#value'       => t('Next »'),
        '#wizard type' => 'next',
        '#next'        => 'step-4',
        '#attributes'  => array(),
      );

      break;

    case 4:
      // Advert preview step.
      $form['preview_node'] = ads_advert_get_node_preview($node, TRUE);
      break;
  }

  if (isset($form['buttons']['cancel'])) {
    $form['buttons']['cancel']['#weight'] = -1;
  }

  if (isset($form['buttons']['previous'])) {
    $form['buttons']['previous']['#weight'] = 1;
  }

  if (isset($form['buttons']['next'])) {
    $form['buttons']['next']['#weight'] = 3;
  }

  if (isset($form['buttons']['return'])) {
    $form['buttons']['return']['#weight'] = 4;
  }

  if ($step == 3 || $step == 4 || $node_is_already_saved) {
    $form['buttons']['return'] = array(
      '#type'        => 'submit',
      '#value'       => t('Save'),
      '#wizard type' => 'finish',
      '#attributes'  => array(),
      '#weight'      => 4,
    );
  }

  $form['actions'] = array();

  // We don't want user to see content type node references widget.
  $form['field_ad_category_node_ref']['#access'] = FALSE;

  return $form;
}

/**
 * Returns advert node preview form.
 *
 * @param node $node
 *   Advert node.
 * @param bool $use_cache
 *   Indicates whether use cache when retrieving advert node content type nodes.
 */
function ads_advert_get_node_preview($node, $use_cache = FALSE) {
  ctools_include('object-cache');

  // We need that call to make attachments work.
  _field_invoke_multiple('load', 'node', array($node->nid => $node));

  $preview = node_view($node);

  $content_type_nodes = ads_advert_get_node_content_type_nodes($node, TRUE);

  foreach ($content_type_nodes as $content_type => $content_type_node) {

    // Generating content type node preview form.
    $content_type_preview_form = node_view($content_type_node);

    // We don't want any links on the form.
    unset($content_type_preview_form['links']);

    $preview['ct_' . $content_type] = $content_type_preview_form;
  }

  return $preview;
}

/**
 * Returns advert node content type node references.
 *
 * @param node $node
 *   Advert node.
 * @param bool $use_cache
 *   Indicates whether use cache when retrieving advert node content type nodes.
 */
function ads_advert_get_node_content_type_nodes($node, $use_cache = TRUE) {

  if (!isset($node->field_ad_category_node_ref)) {
    return array();
  }

  $content_type_nodes       = array();
  $node_saved_content_types = array();

  if (!isset($node->field_ad_category_node_ref[$node->language])) {
    // No categories-related content type node references in advert node.
    return array();
  }

  foreach ($node->field_ad_category_node_ref[$node->language] as $index => $record) {
    $entity = node_load($record['target_id']);
    $node_saved_content_types[$entity->type] = $index;
  }

  $content_types = ads_advert_get_node_category_content_types($node);

  // Trying to retrieve content type nodes from the cache.
  $cached_content_type_nodes = ctools_object_cache_get('ads_advert_edit', 'content_type_nodes');

  // Traversing all category-related content types in top-bottom direction.
  foreach ($content_types as $content_type) {

    $content_type_node = $use_cache ? @$cached_content_type_nodes[$content_type] : NULL;

    if ($content_type_node === NULL) {
      // Getting index of content type node saved in the node field.
      $content_type_node_index = @$node_saved_content_types[$content_type];

      if ($content_type_node_index === NULL) {
        continue;
      }

      $content_type_node_nid = $node->field_ad_category_node_ref[$node->language][$content_type_node_index]['target_id'];

      $content_type_nodes[$content_type] = node_load($content_type_node_nid);
    }
    else {
      $content_type_nodes[$content_type] = $content_type_node;
    }
  }

  return $content_type_nodes;
}

/**
 * Returns list of content type names related with advert node categories.
 *
 * @param node $node
 *   Advert node.
 */
function ads_advert_get_node_category_content_types($node) {
  $category      = current($node->field_ad_category[LANGUAGE_NONE]);

  // List of current and parent terms' related content types.
  $content_types = array();

  if ($category) {
    // Category has been selected. Retrieving current and all the parent
    // terms. Note that a single term may be related to many content types.
    foreach (taxonomy_get_parents_all($category['tid']) as $parent_term) {
      if (is_array($parent_term->field_cat_content_type) && !empty($parent_term->field_cat_content_type)) {
        // Term defines related content type, adding it to the list in
        // parent -> child order.
        $terms = reset($parent_term->field_cat_content_type);

        foreach ($terms as $term) {
          $content_types = array_merge(array($term['value']), $content_types);
        }
      }
    }
  }

  return $content_types;
}

/**
 * Validation callback function called for advert edit form.
 */
function ads_advert_form_step_validate($form, &$form_state) {
  module_load_include('inc', 'node', 'node.pages');

  // Fixes feeds module notice.
  $form_state['values']['feeds'] = array();
};

/**
 * Submit callback function called for advert edit form.
 */
function ads_advert_form_step_submit(&$form, &$form_state) {
  // We don't want other submit callbacks to be called.
  $form['#submit'] = array();

  // Building advert node properties from input values.
  $form_state['node'] = node_form_submit_build_node($form, $form_state);

  // Storing node in the cache.
  ctools_object_cache_set('ads_advert_edit', 'node', $form_state['node']);
};

/**
 * Generates step 1 of advert edit form.
 */
function ads_advert_form_step_1($form, &$form_state) {
  return ads_advert_form_step($form, $form_state, 1);
};

/**
 * Implements hook_form_validate().
 */
function ads_advert_form_step_1_validate($form, &$form_state) {
  ads_advert_form_step_validate($form, $form_state);
};

/**
 * Implements hook_form_submit().
 */
function ads_advert_form_step_1_submit(&$form, &$form_state) {
  ads_advert_form_step_submit($form, $form_state);
};


/**
 * Generates step 2 of advert edit form.
 */
function ads_advert_form_step_2($form, &$form_state) {
  return ads_advert_form_step($form, $form_state, 2);
};

/**
 * Implements hook_form_validate().
 */
function ads_advert_form_step_2_validate($form, &$form_state) {
  ads_advert_form_step_validate($form, $form_state);
};

/**
 * Implements hook_form_submit().
 */
function ads_advert_form_step_2_submit(&$form, &$form_state) {
  ads_advert_form_step_submit($form, $form_state);
};

/**
 * Generates step 3 of advert edit form.
 */
function ads_advert_form_step_3($form, &$form_state) {
  return ads_advert_form_step($form, $form_state, 3);
};

/**
 * Implements hook_form_validate().
 */
function ads_advert_form_step_3_validate($form, &$form_state) {

  $form_state['values']['changed'] = REQUEST_TIME;

  ads_advert_form_step_validate($form, $form_state);
};

/**
 * Implements hook_form_submit().
 */
function ads_advert_form_step_3_submit(&$form, &$form_state) {



  $content_types = ads_advert_get_node_category_content_types($form_state['node']);

  $content_type_nodes = ctools_object_cache_get('ads_advert_edit', 'content_type_nodes');

  // Traversing all category-related content types in top-bottom direction.
  foreach ($content_types as $content_type) {

    // We have ready content type's form state in $form_state[$content_type]
    // array.
    $content_type_node_form_state = &$form_state[$content_type];

    // As $form_state['values'] belongs to advert node, we have to use
    // $form_state['input'] for content type node creation.
    $content_type_node_form_state['values'] = $form_state['input'];

    // The node_form_submit_build_node function requires passing the
    // $form_state['node'] argument with the node the function should operate
    // on. Our content type node is already cached so we will use its cached
    // version.
    $content_type_node_form_state['node']   = $content_type_nodes[$content_type];

    // Fill up node properties with the form state input values.
    $content_type_node_form_state['node']   = node_form_submit_build_node($form[$content_type]['form'], $content_type_node_form_state);

    // We don't want other submit callbacks to be called.
    $form[$content_type]['#submit']      = array();

    $content_type_nodes[$content_type]   = $content_type_node_form_state['node'];
  }

  // Caching content type node objects.
  ctools_object_cache_set('ads_advert_edit', 'content_type_nodes', $content_type_nodes);
};

/**
 * Generates step 3 of advert edit form.
 */
function ads_advert_form_step_4($form, &$form_state) {
  return ads_advert_form_step($form, $form_state, 4);
};

/**
 * Implements hook_form_validate().
 */
function ads_advert_form_step_4_validate($form, &$form_state) {
  ads_advert_form_step_validate($form, $form_state);
};

/**
 * Implements hook_form_submit().
 */
function ads_advert_form_step_4_submit(&$form, &$form_state) {
}

/**
 * Handles the 'Next' click on the add/edit pane form wizard.
 */
function ads_advert_edit_form_subtask_next(&$form_state) {
  $ads_advert_form = &$form_state['node'];
  // Caching the whole advert node edit form.
  $cache = ctools_object_cache_set('ads_advert_edit', 'form', $ads_advert_form);
};


/**
 * Handles the 'Finish' click on the add/edit pane form wizard.
 */
function ads_advert_edit_form_subtask_finish(&$form_state) {

  $node = $form_state['node'];

  $content_types = ads_advert_get_node_category_content_types($node);

  // Clearing content type node references in the advert node object.
  $node->field_ad_category_node_ref[$node->language] = array();

  $content_type_nodes = ctools_object_cache_get('ads_advert_edit', 'content_type_nodes');

  // Traversing all category-related content types in top-bottom direction.
  foreach ($content_types as $content_type) {
    $content_type_node = $content_type_nodes[$content_type];

    // Saving content type node.
    node_save($content_type_node);

    // Adding content type node reference to the advert node object.
    $node->field_ad_category_node_ref[$node->language][] = array(
      'target_id'   => $content_type_node->nid,
      'target_type' => 'node',
    );
  }

  // Saving advert node.
  node_save($node);

  ads_advert_editor_form_clear_caches();

  $form_state['redirect'] = 'advert/' . $node->nid;
};

/**
 * Handles the 'Cancel' click on the add/edit pane form wizard.
 */
function ads_advert_edit_form_subtask_cancel(&$form_state) {
  ads_advert_editor_form_clear_caches();

  $action    = arg(1);

  if ($action === 'edit') {
    $form_state['redirect'] = 'advert/view/' . (int) arg(2);
  }
  else {
    $form_state['redirect'] = '<front>';
  }
}

/**
 * Clears the advert editing form caches.
 */
function ads_advert_editor_form_clear_caches() {
  // Clearing advert node edit form cache.
  ctools_object_cache_clear('ads_advert_edit', 'form');

  // Clearing content type nodes cache.
  ctools_object_cache_clear('ads_advert_edit', 'content_type_nodes');

  // Removing advert node from the cache.
  ctools_object_cache_clear('ads_advert_edit', 'node');
}


/**
 * Advert node preview page.
 */
function ads_advert_view() {
  $nid = arg(1);

  if (empty($nid) || !is_numeric($nid)) {
    drupal_not_found();
    exit;
  }

  $node = node_load($nid);

  if (empty($node->nid)) {
    drupal_not_found();
    exit;
  }

  return ads_advert_get_node_preview($node, FALSE);
}
