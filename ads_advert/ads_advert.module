<?php
/**
 * @file
 * Code for the Ads Advert feature.
 */

// Number of items of which categories will be used to create query for facets.
define('ADS_ADVERT_NUM_CATEGORIES_CT_SEARCH', 10);

// Name of the search_api_index record used to search ads.
define('ADS_ADVERT_SEARCH_INDEX_NAME', 'ads_adverts');

include_once 'ads_advert.features.inc';

/**
 * Implements hook_search_api_solr_query_alter().
 */
function ads_advert_search_api_solr_query_alter(&$call_args, SearchApiQueryInterface $query) {

  $options = &$query->getOptions();

  // Retrieving names of fields on the search server.
  list ($field_ad_category_node_ref, $nid)
    = ads_search_get_search_api_final_field_name($query->getIndex(), array(
      'field_ad_category_node_ref',
      'nid',
    ));

  $search_id_segments = explode(':', $options['search id']);

  if ($search_id_segments[0] === 'ads_advert_categories_facets_search') {
    // It's the query which search facets related with first nth categories.
    // we're using Solr join to retrieve facets related to the nodes created in
    // ads (those nodes acts as containers for values created by user when
    // filling fields related to categories).
    $call_args['query'] = '{!join from=' . $field_ad_category_node_ref . ' to=' . $nid . ' cache=false}{!edismax}' . $call_args['query'];

    // We need to use join for every fq param too.
    foreach ($call_args['params']['fq'] as &$row) {
      $row = '{!join from=' . $field_ad_category_node_ref . ' to=' . $nid . ' cache=false}' . $row;
    }
  }
}

/**
 * Implements hook_search_api_solr_search_results_alter().
 */
function ads_advert_search_api_solr_search_results_alter(&$results, $query, $response) {

  if (!empty($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest') {
    // Ignore altering AJAX requests.
    // See: http://drupal.stackexchange.com/q/54296/1908
    return;
  }

  $original_options = $query->getOptions();

  if (strpos($original_options['search id'], 'search_api_views:ads_search_results') === 0) {
    // It's our original query that searches ads.

    $original_facet_counts = &$response->facet_counts;

    // Adding original facets to the $facets_tree.

    $facets_tree   = array();
    $category_tids = array();
    $nodes         = array();

    // Iterating of first nth categories.
    for ($i = 0; $i < min(ADS_ADVERT_NUM_CATEGORIES_CT_SEARCH, count($results['results'])); ++$i) {
      $record       = array_slice($results['results'], $i, 1);

      // Retrieving category's taxonomy term tid.
      $category_tid = @current(current(node_load($record[0]['id'])->field_ad_category[LANGUAGE_NONE]));

      if ($category_tid !== NULL) {
        // We use only tids that were specified.
        $category_tids[] = $category_tid;
      }
    }

    // For every category from the list...
    foreach ($category_tids as $category_tid) {
      // ... We retrieve list of its and parent content types used by that
      // category.
      $content_types = ads_advert_get_category_content_types($category_tid);

      // For every content type...
      foreach ($content_types as $content_type_category_tid => $content_type_name) {
        // ... We retrieve list of fields in that content type which names
        // starts with "field_" so we know it's a custom field.
        $fields = field_info_instances('node', $content_type_name);

        $category_term = taxonomy_term_load($content_type_category_tid);

        // We want only custom fields.
        foreach ($fields as $name => $field) {
          if (substr($name, 0, 6) !== 'field_') {
            // We don't want non-custom field.
            unset($fields[$name]);
          }

          // Marking fields as being used so we can add it to facets query.
          // @NOTE: This functionality is currently commented until we have
          // problems with query speed.
          //
          // $fields_used[$name] = TRUE;

          $facets_tree[$content_type_category_tid]['category_title'] = $category_term->name;
          $facets_tree[$content_type_category_tid]['category_tid']   = $content_type_category_tid;

          // @ignore sniffer_whitespace_scopeindent_incorrect:5
          // @ignore sniffer_whitespace_scopeindent_incorrectexact:5
          // @ignore sniffer_whitespace_scopeclosingbrace_indent:5
          $facets_tree[$content_type_category_tid]['category_parents_tids']
            = array_reverse(array_map(function($category) {
                return $category->tid;
              }, taxonomy_get_parents_all($content_type_category_tid)));

          $facets_tree[$content_type_category_tid]['fields'][$name] = array(
            'category_title' => $category_term->name,
            'field_name' => $name,
            'content_type_name' => $content_type_name,
          );
        }
      }
    }

    $index_name    = ADS_ADVERT_SEARCH_INDEX_NAME;
    $searcher_name = 'search_api@' . $index_name;

    // @NOTE: This functionality is currently commented until we have problems
    // with query speed. If we encounter some slowness, we may remove facets
    // from being loaded all in the first query (we don't need them as they're
    // all empty so we can remove all $facets_needed from the first query. To
    // accomplish that we should move following code into
    // ads_advert_search_api_solr_query_alter function. It's here as I thought
    // about other way - adding facet query for all needed fields in second
    // query. I'm not sure if it's doable (maybe we'll leave the admin with
    // opportunity to enable/disable required facets - with huge amount of
    // fields this could be a quite complicated job).
    //
    // @ignore sniffer_commenting_inlinecomment_spacingbefore:20
    // if (in_array($searcher_name, facetapi_get_active_searchers())) {
    //   $facet_realms  = facetapi_get_realm_info();
    //   $facets_info   = facetapi_get_facet_info($searcher_name);
    //   $facets_needed = array();
    //
    //   /** @var $adapter SearchApiFacetapiAdapter **/
    //   $adapter      = facetapi_adapter_load($searcher_name);
    //
    //   foreach ($facets_info as $facet_name => $facet_info) {
    //
    //     if (@$fields_used[reset(explode(':', $facet_info['field'], 2))]) {
    //       $facets_needed[$facet_info['name']] = array(
    //         'field' => $facet_info['field'],
    //         'limit' => '100',
    //         'operator' => 'and',
    //         'min_count' => 1,
    //         'missing' => 0,
    //       );
    //     }
    //   }
    // }

    // Cloning query and limiting it to the first three categories found.
    // We need that query to retrieve facets related only to those categories.

    $search_id = 'ads_advert_categories_facets_search';

    $query_clone = clone $query;
    $query_clone->setOption('search id', $search_id);
    $query_clone->setOption('limit', ADS_ADVERT_NUM_CATEGORIES_CT_SEARCH);

    $or = $query_clone->createFilter('OR');

    if (!empty($category_tids)) {
      foreach ($category_tids as $category_tid) {
        $or->condition('field_ad_category', $category_tid);
        $or->condition('field_ad_category:parent', $category_tid);
      }

      $query_clone->filter($or);
    }

    // We need our search to be stored somewhere.

    // @TODO: Generate and pass id to the template.
    $stored_search_id = 'id';

    // Saving rendered facets from the original query.
    $_SESSION['search_api_queries'][$stored_search_id]['last_facets']
      = ads_advert_render_facet_filters($query, $results);

    // Saving serialized version of cloned query to use later via ajax.
    $_SESSION['search_api_queries'][$stored_search_id]['serialized']
      = ads_search_search_api_query_serialize($query_clone);

    // Saving tree of facets fields used by cloned query.
    $_SESSION['search_api_queries'][$stored_search_id]['facets_tree']
      = $facets_tree;
  }
}

/**
 * Sorts assoc array by item's field which is an list of parent ids.
 *
 * @param array $array
 *   Source array.
 *
 * @param string $parents_field
 *   Name of the field used as an list of parent ids.
 *
 * @return array
 *   Sorted version of source array.
 */
function ads_advert_array_tree_sort_assoc_field($array, $parents_field) {
  $result = array();

  foreach ($array as $key => $item) {
    foreach ($item[$parents_field] as $parent_id) {
      if ($parent_id === $key) {
        continue;
      }

      $result[$parent_id] = $array[$parent_id];

      unset($array[$parent_id]);
    }

    $result[$key] = $item;
  }

  return $result;
}

/**
 * Returns facets HTML for the specified query.
 *
 * @param SearchApiQuery $query
 *   SearchApiQuery object to render facets for.
 *
 * @param array $result
 *   Result of the query. Not yet used.
 *
 * @param array $facets_tree
 *   Facets tree generated by ads_advert_search_api_solr_search_results_alter().
 */
function ads_advert_render_facet_filters(SearchApiQuery $query, $result, $facets_tree = array()) {

  if (empty($_SERVER['HTTP_REFERER'])) {
    return '';
  }

  $index_name    = 'ads_adverts';
  $searcher_name = 'search_api@' . $index_name;

  // Rendering facets.
  $adapter = facetapi_adapter_load($searcher_name);
  $adapter->initActiveFilters($query);

  // @TODO: We need to change $_GET['q'] before rendering.
  $facets_rendered = $adapter->buildRealm('block');

  $field_references = array();

  // We need to update fields later by name so we're creating list of field
  // references.
  foreach ($facets_tree as $category_tid => &$info) {
    foreach ($info['fields'] as $field_name => $field_info) {
      $field_references[$field_name] = &$facets_tree[$category_tid]['fields'][$field_name];
    }
  }

  // Adding rendered version of facets into $facets_tree.
  foreach ($facets_rendered as $field_name => $field) {
    if ($field_name{0} === '#') {
      // It's not a field information.
      continue;
    }

    // Name segments in style: ['field_name', 'field_attribute'], e.g.
    // ['field_category', 'tid'].
    $name_segments = explode(':', $field_name);

    if (empty($field_references[$name_segments[0]]['rendered'])) {
      $field_references[$name_segments[0]]['rendered'] = '';
    }

    // Rendering field and adding its HTML into $facets_tree array.
    $field_references[$name_segments[0]]['rendered'] .= render($field[$field_name]);
  }

  // Removing empty facets (those without rendered HTML).
  foreach ($facets_tree as $category_tid => &$info) {
    $fields = &$info['fields'];

    foreach ($fields as $name => $field) {
      if (empty($field['facets'])) {
        // @FIXIT: Field names has no attribute name so they are overwritten.
        // We need to find a way to distinguish them.
        unset($fields[$name]);
      }
    }

    if (empty($fields)) {
      unset($facets_tree[$category_tid]);
    }
  }

  // Sorting categories by hierarchy level top-down.
  $facets_tree = ads_advert_array_tree_sort_assoc_field($facets_tree, 'category_parents_tids');

  // Rendering "ads-search-filters-refine.tpl.php".
  echo theme('ads_search_filters_refine', array('tree' => $facets_tree));
}

/**
 * Implements hook_menu().
 */
function ads_advert_menu() {
  $menu['advert/add'] = array(
    'title'            => 'Advert',
    'description'      => 'Advert',
    'page callback'    => 'ads_advert_form_wizard',
    'page arguments'   => array(2),
    'access arguments' => array('access content'),
  );

  $menu['advert/%/edit'] = array(
    'title'            => 'Advert',
    'description'      => 'Advert',
    'page callback'    => 'ads_advert_form_wizard',
    'page arguments'   => array(2, 3),
    'access arguments' => array('access content'),
  );

  $menu['advert/%'] = array(
    'title'            => 'Advert',
    'description'      => 'Advert',
    'page callback'    => 'ads_advert_view',
    'page arguments'   => array(2),
    'access arguments' => array('access content'),
  );

  // Renders facets related with ads categories. The parameter is id of the
  // search generated for this page.
  $menu['advert/facets/ajax/%'] = array(
    'page callback' => 'ads_advert_advert_facets_get_ajax',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
  );

  return $menu;
}

/**
 * Ajax callback. Renders facets for the specified stored query id.
 */
function ads_advert_advert_facets_get_ajax($query_id) {
  $query_string = $_SESSION['search_api_queries'][$query_id]['serialized'];
  $last_facets_html = $_SESSION['search_api_queries'][$query_id]['last_facets'];
  $facets_tree = $_SESSION['search_api_queries'][$query_id]['facets_tree'];

  // Unserializing stored SearchApiQuery object.
  list($query, $custom_data) = ads_search_search_api_query_unserialize($query_string);

  $result = $query->execute();

  // Filling $facets_tree with facet counts.

  $field_references = array();

  foreach ($facets_tree as $category_tid => $category) {
    foreach ($category['fields'] as $field_name => $info) {
      $field_references[$field_name] = &$facets_tree[$category_tid]['fields'][$field_name];
    }
  }

  foreach ($result['search_api_facets'] as $field_name => $items) {

    // Name segments in style: ['field_name', 'field_attribute'], e.g.
    // ['field_category', 'tid'].
    $name_segments = explode(':', $field_name);

    $field_references[$name_segments[0]]['facets'] = $items;
  }

  echo $last_facets_html;

  // Rendering facets.
  echo ads_advert_render_facet_filters($query, $result, $facets_tree);

  // We no longer need that query.
  unset($_SESSION['search_api_queries'][$query_id]);
}

/**
 * Multi-step Wizard for advert edit form.
 *
 * @return string
 *   Multistep wizard output.
 */
function ads_advert_form_wizard() {
  ctools_include('wizard');
  ctools_include('object-cache');

  ads_theme_add_js(ads_theme_find('ads_advert', 'js', 'ads_advert.js', ADS_THEME_FIND_JS));

  $action = arg(1) == 'add' ? 'add' : 'edit';

  $form_info = array(
    'id'              => 'ads_advert_edit',
    'show trail'      => TRUE,
    'show back'       => TRUE,
    'show cancel'     => TRUE,
    'show return'     => FALSE,
    'back text'       => 'Back',
    'next text'       => 'Next',
    'next callback'   => 'ads_advert_edit_form_subtask_next',
    'finish callback' => 'ads_advert_edit_form_subtask_finish',
    'return callback' => 'ads_advert_edit_form_subtask_finish',
    'cancel callback' => 'ads_advert_edit_form_subtask_cancel',
    'order' => array(
      'step-1' => t('Basic information'),
      'step-2' => t('Category selection'),
      'step-3' => t('Details'),
      'step-4' => t('Preview'),
    ),
    'forms' => array(
      'step-1' => array(
        'form id' => 'ads_advert_form_step_1',
      ),
      'step-2' => array(
        'form id' => 'ads_advert_form_step_2',
      ),
      'step-3' => array(
        'form id' => 'ads_advert_form_step_3',
      ),
      'step-4' => array(
        'form id' => 'ads_advert_form_step_4',
      ),
    ),
  );

  if ($action === 'add') {
    // Advert adding action.
    $step              = arg(2);
    $form_info['path'] = 'advert/add/%step';
  }
  elseif ($action === 'edit') {
    // Advert editing action.
    $step              = arg(3);
    $nid               = (int) arg(1);

    $form_info['path'] = 'advert/' . $nid . '/edit/%step';
  }

  $ads_advert_form = ctools_object_cache_get('ads_advert_edit', 'form');

  if (!$ads_advert_form) {
    $step            = current(array_keys($form_info['order']));
    $ads_advert_form = new stdClass();

    ctools_object_cache_set('ads_advert_edit', 'form', $ads_advert_form);
  }

  if ((array) $ads_advert_form) {
    $form_state['node'] = $ads_advert_form;
  }

  $output = ctools_wizard_multistep_form($form_info, $step, $form_state);

  return $output;
}

/**
 * Generates advert edit form based on the specified step.
 */
function ads_advert_form_step($form, &$form_state, $step = 1) {

  $node_type = 'advert';
  $form_id   = $node_type . '_node_form';
  $action    = arg(1) == 'add' ? 'add' : 'edit';
  $nid       = ($action === 'edit') ? arg(1) : NULL;

  module_load_include('inc', 'node', 'node.pages');

  ctools_include('object-cache');

  $user = $GLOBALS['user'];

  if ($form_state['rebuild']) {
    // Don't hang on to submitted data in form state input.
    $form_state['input'] = array();
  }

  $node = ctools_object_cache_get('ads_advert_edit', 'node');

  if (
      // Adding a node that is already saved.
      $action == 'add' && $node !== NULL && !empty($node->nid)
      // Editing a node with nid other than that stored in cache.
    || $action == 'edit' && $node !== NULL && $node->nid != $nid) {
    // Clearing caches.

    if ($nid !== 'ajax') {
      ads_advert_editor_form_clear_caches();
      $node = NULL;
    }
  }

  if ($node === NULL && !empty($nid)) {
    // We need to load node as it will be edited by the user.
    $node = node_load($nid);

    $content_type_nodes = ads_advert_get_node_content_type_nodes($node, FALSE);

    // Storing advert node content type nodes in the cache.
    ctools_object_cache_set('ads_advert_edit', 'content_type_nodes', $content_type_nodes);
  }

  if (empty($node)) {
    // Node is not in cache, creating new one.
    $node = new stdClass();
    $node->nid      = NULL;
    $node->title    = '';
    $node->uid      = $user->uid;
    $node->name     = isset($user->name) ? $user->name : '';
    $node->type     = $node_type;
    $node->feeds    = array();
    $node->language = LANGUAGE_NONE;

    node_object_prepare($node);
  }

  $node_is_already_saved = !empty($node->nid);

  // Storing advert node in the cache.
  ctools_object_cache_set('ads_advert_edit', 'node', $node);

  // Generating advert node edit form.
  $form = node_form($form, $form_state, $node);

  // Hiding step-unrelated field-groups.
  foreach (array(1, 2, 3) as $i) {
    if ($step != $i) {
      field_group_hide_field_groups($form, array('group_advert_step_' . $i));
    }
  }

  field_group_hide_field_groups($form, array('group_advert_hidden'));

  switch ($step) {
    case 1:
    case 2:
    case 4:
      // We don't want following fields in step 1 and 2:
      unset($form['author']);
      unset($form['revision_information']);
      unset($form['options']);
      unset($form['additional_settings']);
      break;
  }

  switch ($step) {
    case 3:
      // Category-related content types step.
      $content_types = ads_advert_get_node_category_content_types($form_state['node']);

      $content_type_nodes = ctools_object_cache_get('ads_advert_edit', 'content_type_nodes');

      // Traversing all category-related content types in top-bottom direction.
      foreach ($content_types as $content_type) {

        // Fetching full content type name.
        $content_type_name     = node_type_get_name((object) array('type' => $content_type));

        // Rendering content type form.
        $form[$content_type] = array(
          '#title' => ucwords($content_type_name),
          '#type'  => 'fieldset',
        );

        $content_type_form       = &$form[$content_type]['form'];
        $content_type_form_state = &$form_state[$content_type];

        // We are loading node from the cache or creating new one if not already
        // in cache.
        $content_type_node = @$content_type_nodes[$content_type];

        if ($content_type_node === NULL) {
          // Node isn't cached, creating new one.
          $content_type_node = new stdClass();

          // Filling node default settings.
          $content_type_node->title    = '';
          $content_type_node->nid      = NULL;
          $content_type_node->type     = $content_type;
          $content_type_node->uid      = $user->uid;
          $content_type_node->name     = isset($user->name) ? $user->name : '';
          $content_type_node->language = LANGUAGE_NONE;
          $content_type_node->title    = '';

          node_object_prepare($content_type_node);

          $content_type_nodes[$content_type] = $content_type_node;
        }

        // Generating content type node editing form.
        $content_type_form = node_form($content_type_form, $content_type_form_state, $content_type_node);

        // We don't want following fields in step 3:
        unset($content_type_form['title']);
        unset($content_type_form['body']);
        unset($content_type_form['author']);
        unset($content_type_form['revision_information']);
        unset($content_type_form['options']);
        unset($content_type_form['additional_settings']);

        // Skipping not ours submit callbacks.
        $content_type_form['actions'] = array();

        if (!empty($content_type_form_state['field'])) {
          // Copying content type node fields into $form_state['fields'] array.
          foreach ($content_type_form_state['field'] as $key => $value) {
            $form_state['field'][$key] = $value;
          }
        }

        // Clearing references.
        unset($content_type_form);
        unset($content_type_form_state);
      }

      // Caching content type nodes for later use, e.g., in submit callback.
      ctools_object_cache_set('ads_advert_edit', 'content_type_nodes', $content_type_nodes);

      $form['buttons']['next'] = array(
        '#type'        => 'submit',
        '#value'       => t('Next'),
        '#wizard type' => 'next',
        '#next'        => 'step-4',
        '#attributes'  => array(),
      );

      break;

    case 4:
      // Advert preview step.
      $form['preview_node'] = ads_advert_get_node_preview($node, TRUE);

      break;
  }

  if (isset($form['buttons']['cancel'])) {
    $form['buttons']['cancel']['#weight'] = -1;
  }

  if (isset($form['buttons']['previous'])) {
    $form['buttons']['previous']['#weight'] = 1;
    unset($form['buttons']['previous']['#submit']);
    unset($form['buttons']['previous']['#limit_validation_errors']);
  }

  if (isset($form['buttons']['next'])) {
    $form['buttons']['next']['#weight'] = 3;
  }

  if (isset($form['buttons']['return'])) {
    $form['buttons']['return']['#weight'] = 4;
  }

  if ($step == 2 || $step == 3) {
    unset($form['buttons']['cancel']);
  }

  if ($step == 3 || $step == 4 || $node_is_already_saved) {
    $form['buttons']['return'] = array(
      '#type'        => 'submit',
      '#value'       => t('Save'),
      '#wizard type' => 'finish',
      '#attributes'  => array(),
      '#weight'      => 4,
    );
  }

  $form['actions'] = array();

  // We don't want user to see content type node references widget.
  $form['field_ad_category_node_ref']['#access'] = FALSE;

  if (module_exists('ads_user')) {
    if ($action !== 'edit' && empty($node->step3_done)) {
      // Auto-filling address fields.
      $profile         = profile2_load_by_user($user, 'user_profile');
      $profile_address = &$profile->field_user_profile_address[LANGUAGE_NONE][0];
      $form_address    = &$form['field_ad_address'][LANGUAGE_NONE][0]['#address'];

      $profile_address_filled = FALSE;

      foreach (array(
        'thoroughfare',
        'premise',
        'locality',
        'administrative_area',
        'postal_code',
        ) as $name) {
        if (!empty($profile_address[$name])) {
          $profile_address_filled = TRUE;
          break;
        }
      }

      if (!$profile_address_filled && module_exists('smart_ip')) {
        $location = smart_ip_get_current_visitor_location_data();

        if (!empty($location['country_code'])) {
          $profile_address['country'] = $location['country_code'];
        }

        if (empty($profile_address['locality'])) {
          if (!empty($location['city'])) {
            $profile_address['locality'] = $location['city'];
          }
        }
      }

      foreach (array(
        'thoroughfare',
        'premise',
        'locality',
        'administrative_area',
        'postal_code',
        'country',
        ) as $name) {
        if (isset($profile_address[$name])) {
          $form_address[$name] = $profile_address[$name];
        }
      }
    }
  }

  return $form;
}

/**
 * Returns advert node preview form.
 *
 * @param node $node
 *   Advert node.
 * @param bool $use_cache
 *   Indicates whether use cache when retrieving advert node content type nodes.
 */
function ads_advert_get_node_preview($node, $use_cache = FALSE) {
  ctools_include('object-cache');

  // We need that call to make attachments work.
  _field_invoke_multiple('load', 'node', array($node->nid => $node));

  $preview = node_view($node);

  $content_type_nodes = ads_advert_get_node_content_type_nodes($node, TRUE);

  foreach ($content_type_nodes as $content_type => $content_type_node) {

    // Generating content type node preview form.
    $content_type_preview_form = node_view($content_type_node);

    // We don't want any links on the form.
    unset($content_type_preview_form['links']);

    $preview['ct_' . $content_type] = $content_type_preview_form;
  }

  return array('#markup' => drupal_render($preview));
}

/**
 * Returns advert node content type node references.
 *
 * @param node $node
 *   Advert node.
 * @param bool $use_cache
 *   Indicates whether use cache when retrieving advert node content type nodes.
 */
function ads_advert_get_node_content_type_nodes($node, $use_cache = TRUE) {

  if (!isset($node->field_ad_category_node_ref)) {
    return array();
  }

  $content_type_nodes       = array();
  $node_saved_content_types = array();

  if (!isset($node->field_ad_category_node_ref[$node->language])) {
    // No categories-related content type node references in advert node.
    return array();
  }

  foreach ($node->field_ad_category_node_ref[$node->language] as $index => $record) {
    $entity = node_load($record['target_id']);
    $node_saved_content_types[$entity->type] = $index;
  }

  $content_types = ads_advert_get_node_category_content_types($node);

  ctools_include('object-cache');

  // Trying to retrieve content type nodes from the cache.
  $cached_content_type_nodes = ctools_object_cache_get('ads_advert_edit', 'content_type_nodes');

  // Traversing all category-related content types in top-bottom direction.
  foreach ($content_types as $content_type) {

    $content_type_node = $use_cache ? @$cached_content_type_nodes[$content_type] : NULL;

    if ($content_type_node === NULL) {
      // Getting index of content type node saved in the node field.
      $content_type_node_index = @$node_saved_content_types[$content_type];

      if ($content_type_node_index === NULL) {
        continue;
      }

      $content_type_node_nid = $node->field_ad_category_node_ref[$node->language][$content_type_node_index]['target_id'];

      $content_type_nodes[$content_type] = node_load($content_type_node_nid);
    }
    else {
      $content_type_nodes[$content_type] = $content_type_node;
    }
  }

  return $content_type_nodes;
}

/**
 * Returns list of content type names related with advert node categories.
 *
 * @param node $node
 *   Advert node.
 */
function ads_advert_get_node_category_content_types($node) {
  if (empty($node->field_ad_category[LANGUAGE_NONE])) {
    // No content types for an empty category.
    return array();
  }

  $category      = current($node->field_ad_category[LANGUAGE_NONE]);

  return ads_advert_get_category_content_types($category['tid']);
}

/**
 * Returns list of content type names related with advert category tid.
 *
 * @param int $category_tid
 *   Category tid.
 */
function ads_advert_get_category_content_types($category_tid) {

  // List of current and parent terms' related content types.
  $content_types = array();

  if ($category_tid) {
    // Category has been selected. Retrieving current and all the parent
    // terms. Note that a single term may be related to many content types.
    foreach (taxonomy_get_parents_all($category_tid) as $parent_term) {
      if (is_array($parent_term->field_cat_content_type) && !empty($parent_term->field_cat_content_type)) {
        // Term defines related content type, adding it to the list in
        // parent -> child order.
        $terms = reset($parent_term->field_cat_content_type);

        foreach ($terms as $term) {
          $content_types[$parent_term->tid] = $term['value'];
        }
      }
    }
  }

  return $content_types;
}

/**
 * Validation callback function called for advert edit form.
 */
function ads_advert_form_step_validate($form, &$form_state) {
  module_load_include('inc', 'node', 'node.pages');

  // Fixes feeds module notice.
  $form_state['values']['feeds'] = array();
}

/**
 * Submit callback function called for advert edit form.
 */
function ads_advert_form_step_submit(&$form, &$form_state) {
  // We don't want other submit callbacks to be called.
  $form['#submit'] = array();

  // Building advert node properties from input values.
  $form_state['node'] = node_form_submit_build_node($form, $form_state);

  // Storing node in the cache.
  ctools_object_cache_set('ads_advert_edit', 'node', $form_state['node']);
}

/**
 * Generates step 1 of advert edit form.
 */
function ads_advert_form_step_1($form, &$form_state) {
  return ads_advert_form_step($form, $form_state, 1);
}

/**
 * Implements hook_form_validate().
 */
function ads_advert_form_step_1_validate($form, &$form_state) {
  ads_advert_form_step_validate($form, $form_state);
}

/**
 * Implements hook_form_submit().
 */
function ads_advert_form_step_1_submit(&$form, &$form_state) {
  ads_advert_form_step_submit($form, $form_state);
}


/**
 * Generates step 2 of advert edit form.
 */
function ads_advert_form_step_2($form, &$form_state) {
  return ads_advert_form_step($form, $form_state, 2);
}

/**
 * Implements hook_form_validate().
 */
function ads_advert_form_step_2_validate($form, &$form_state) {
  ads_advert_form_step_validate($form, $form_state);
}

/**
 * Implements hook_form_submit().
 */
function ads_advert_form_step_2_submit(&$form, &$form_state) {
  ads_advert_form_step_submit($form, $form_state);
}

/**
 * Generates step 3 of advert edit form.
 */
function ads_advert_form_step_3($form, &$form_state) {
  return ads_advert_form_step($form, $form_state, 3);
}

/**
 * Implements hook_form_validate().
 */
function ads_advert_form_step_3_validate($form, &$form_state) {

  $form_state['values']['changed'] = REQUEST_TIME;

  ads_advert_form_step_validate($form, $form_state);
}

/**
 * Implements hook_form_submit().
 */
function ads_advert_form_step_3_submit(&$form, &$form_state) {

  ctools_include('object-cache');

  $form_state['node']->step3_done = TRUE;

  ads_advert_form_step_submit($form, $form_state);

  $content_types = ads_advert_get_node_category_content_types($form_state['node']);

  $content_type_nodes = ctools_object_cache_get('ads_advert_edit', 'content_type_nodes');

  // Traversing all category-related content types in top-bottom direction.
  foreach ($content_types as $content_type) {

    // We have ready content type's form state in $form_state[$content_type]
    // array.
    $content_type_node_form_state = &$form_state[$content_type];

    foreach ($form_state['values'] as $key => $value) {
      if (!empty($form_state['input'][$key])) {
        $form_state['input'][$key] = $value;
      }
    }

    // As $form_state['values'] belongs to advert node, we have to use
    // $form_state['input'] for content type node creation.
    $content_type_node_form_state['values'] = $form_state['input'];

    // The node_form_submit_build_node function requires passing the
    // $form_state['node'] argument with the node the function should operate
    // on. Our content type node is already cached so we will use its cached
    // version.
    $content_type_node_form_state['node']   = $content_type_nodes[$content_type];

    // Fill up node properties with the form state input values.
    $content_type_node_form_state['node']   = node_form_submit_build_node($form[$content_type]['form'], $content_type_node_form_state);

    // We don't want other submit callbacks to be called.
    $form[$content_type]['#submit']      = array();

    $content_type_nodes[$content_type]   = $content_type_node_form_state['node'];
  }

  // Caching content type node objects.
  ctools_object_cache_set('ads_advert_edit', 'content_type_nodes', $content_type_nodes);
}

/**
 * Generates step 3 of advert edit form.
 */
function ads_advert_form_step_4($form, &$form_state) {
  return ads_advert_form_step($form, $form_state, 4);
}

/**
 * Implements hook_form_validate().
 */
function ads_advert_form_step_4_validate($form, &$form_state) {
  ads_advert_form_step_validate($form, $form_state);
}

/**
 * Implements hook_form_submit().
 */
function ads_advert_form_step_4_submit(&$form, &$form_state) {
}

/**
 * Handles the 'Next' click on the add/edit pane form wizard.
 */
function ads_advert_edit_form_subtask_next(&$form_state) {
  $ads_advert_form = &$form_state['node'];
  // Caching the whole advert node edit form.
  ctools_object_cache_set('ads_advert_edit', 'form', $ads_advert_form);
}

/**
 * Handles the 'Finish' click on the add/edit pane form wizard.
 */
function ads_advert_edit_form_subtask_finish(&$form_state) {

  $node = $form_state['node'];

  $node_address    = $node->field_ad_address[LANGUAGE_NONE][0];
  $profile         = profile2_load_by_user($GLOBALS['user'], 'user_profile');

  if (!$profile) {
    $profile = profile2_create(array('type' => 'user_profile'));
    $profile->setUser($GLOBALS['user']);
    $profile->is_new = TRUE;
  }

  $profile_address = &$profile->field_user_profile_address[LANGUAGE_NONE][0];

  $profile_address_filled = FALSE;

  foreach (array(
    'thoroughfare',
    'premise',
    'locality',
    'administrative_area',
    'postal_code',
    ) as $name) {
    if (!empty($profile_address[$name])) {
      $profile_address_filled = TRUE;
      break;
    }
  }

  if (!$profile_address_filled) {
    foreach (array(
      'thoroughfare',
      'premise',
      'locality',
      'administrative_area',
      'postal_code',
      'country',
      ) as $name) {
      $profile_address[$name] = isset($node_address[$name]) ? $node_address[$name] : '';
    }

    profile2_save($profile);
  }

  $content_types = ads_advert_get_node_category_content_types($node);

  // Clearing content type node references in the advert node object.
  $node->field_ad_category_node_ref[$node->language] = array();

  $content_type_nodes = ctools_object_cache_get('ads_advert_edit', 'content_type_nodes');

  // Traversing all category-related content types in top-bottom direction.
  foreach ($content_types as $content_type) {
    $content_type_node = $content_type_nodes[$content_type];

    // Saving content type node.
    node_save($content_type_node);

    // Adding content type node reference to the advert node object.
    $node->field_ad_category_node_ref[$node->language][] = array(
      'target_id'   => $content_type_node->nid,
      'target_type' => 'node',
    );
  }

  // Saving advert node.
  node_save($node);

  ads_advert_editor_form_clear_caches();

  $form_state['redirect'] = drupal_get_path_alias('node/' . $node->nid);
}

/**
 * Handles the 'Cancel' click on the add/edit pane form wizard.
 */
function ads_advert_edit_form_subtask_cancel(&$form_state) {
  ads_advert_editor_form_clear_caches();

  $action    = arg(2);

  if ($action === 'edit') {
    $form_state['redirect'] = drupal_get_path_alias('node/' . (int) arg(1));
  }
  else {
    $form_state['redirect'] = '<front>';
  }
}

/**
 * Clears the advert editing form caches.
 */
function ads_advert_editor_form_clear_caches() {
  // Clearing advert node edit form cache.
  ctools_object_cache_clear('ads_advert_edit', 'form');

  // Clearing content type nodes cache.
  ctools_object_cache_clear('ads_advert_edit', 'content_type_nodes');

  // Removing advert node from the cache.
  ctools_object_cache_clear('ads_advert_edit', 'node');
}


/**
 * Advert node preview page.
 */
function ads_advert_view() {
  $nid = arg(1);

  if (empty($nid) || !is_numeric($nid)) {
    drupal_not_found();
    exit;
  }

  $node = node_load($nid);

  if (empty($node->nid)) {
    drupal_not_found();
    exit;
  }

  return ads_advert_get_node_preview($node, FALSE);
}

/**
 * Implements hook_views_api_alter().
 */
function ads_advert_views_api_alter(&$list) {
  $path = drupal_get_path('module', 'ads_advert');

  $list['ads_advert']['path']          = $path;
  $list['ads_advert']['template path'] = $path . '/theme';
}

/**
 * Implements hook_theme().
 */
function ads_advert_theme($existing, $type, $theme, $path) {
  return array(
    'ads_advert_wizard_trail' => array(
      'template' => 'ads-advert-wizard-trail',
      'path' => $path . '/theme',
      'type' => 'theme',
    ),
  );
}

/**
 * Preprocesses ads_advert_wizard_trail template variables.
 *
 * @param array $vars
 */
function ads_advert_preprocess_ads_advert_wizard_trail(&$vars) {
  ads_theme_add_css(ads_theme_find('ads_advert', $vars['directory'], 'ads-advert-wizard-trail.scss', ADS_THEME_FIND_SASS));
}
