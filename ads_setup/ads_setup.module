<?php
/**
 * @file
 * Drupal needs this blank file.
 */

/**
 * @file
 * ADS Setup module.
 * Provides post-installation setup screen for Ads distribution and module
 * configuration hook with access to the build.properties file.
 */

/**
 * Checks whether specified feature is already installed in the system.
 *
 * @param string $feature_name
 *   Name of the feature
 *
 * @param string $arg1
 *   Optional indentifier appended to the constructed feature key.
 *
 * @return bool
 *   TRUE if feature is already installed or FALSE elsewhere.
 */
function ads_setup_is_installed($feature_name, $arg1 = NULL) {
  return variable_get('ASF_' . $feature_name . '_' . ($arg1 !== NULL ? $arg1 : ''), FALSE);
}

/**
 * Marks specified feature as already installed in the system.
 *
 * @param string $feature_name
 *   Name of the feature
 *
 * @param string $arg1
 *   Optional indentifier appended to the constructed feature key.
 */
function ads_setup_mark_installed($feature_name, $arg1 = NULL) {
  variable_set('ASF_' . $feature_name . '_' . ($arg1 !== NULL ? $arg1 : ''), TRUE);
}

/**
 * Invokes ads_configure hook for all the modules or the specified one.
 *
 * @param string $properties_path
 *   Path to the build.properties file.
 *
 * @param array $options
 *   Optional. Additional options. Allowed ones:
 *     - include  Name(s) of the module to include.
 *     - exclude  Name(s) of the module(s) to exclude from [re]configuration.
 *     - force    Forces configuration of modules even if they are already configured.
 *     - options  List of option overrides. Separated by semicolon. E.g.
 *                "locations.countries=DE,GB;other.option=value"
 */
function ads_setup_configure($properties_path, $options = array()) {
  if (!file_exists($properties_path)) {
    watchdog('ads_setup', 'File %file does not exist!', array('%file' => $properties_path), WATCHDOG_ERROR);
    return FALSE; // Fail if file doesn't exist.
  }

  $properties_lines = file($properties_path, FILE_IGNORE_NEW_LINES);
  $properties       = array();

  if (!empty($options['options'])) {
    // User wants to override some properties.
    $options_overrides = explode(';', $options['options']);
    foreach ($options_overrides as $option_override)
      $properties_lines[] = 'project.drupal.configure.' . $option_override;
  }

  foreach ($properties_lines as &$property_line) {
    $property_line_segments   = explode('#', $property_line);
    $property_line            = $property_line_segments[0];
    $property_assign_segments = explode('=', $property_line, 2);

    if (count($property_assign_segments) < 2) {
      continue;
    }

    list($key, $value)      = array_map('trim', $property_assign_segments);

    if (empty($key) || substr($key, 0, 25) !== 'project.drupal.configure.') {
      continue;
    }

    $nest = &$properties;
    $keys = explode('.', substr($key, 25));

    while ($key = array_shift($keys)) {
      $nest = &$nest[$key];
    }

    if ($key !== NULL) {
      $nest[$key] = $value;
    }
    else {
      $nest = $value;
    }
  }

  $properties['setup']['paths']['build.properties'] = realpath($properties_path);

  $modules = module_implements('ads_configure', TRUE);

  if (!empty($options['modules'])) {
    // Narrowing down modules to specified ones only.
    $modules = array_intersect($modules, array_map('trim', explode(',', $options['modules'])));
  }

  if (!empty($options['exclude'])) {
    if (!empty($options['include'])) {
      // Including specified modules (even if excluded).
      $includes = array_intersect($modules, array_map('trim', explode(',', $options['include'])));
    }

    // Excluding specified modules.
    $modules = array_diff($modules, array_map('trim', explode(',', $options['exclude'])));

    if (isset($includes)) {
      // Adding included modules (includes have higher priority).
      $modules = array_merge($modules, $includes);
    }
  }

  // Getting rid of module duplicates.
  $modules = array_unique($modules);

  foreach ($modules as $module_name) {
    module_invoke($module_name, 'ads_configure', $properties, isset($options['force']) ? (bool)$options['force'] : FALSE);
  }
}
